{"ast":null,"code":"/**\r\n * Sets a raw response body. Does not append any `Content-Type` headers.\r\n * @example\r\n * res(ctx.body('Successful response'))\r\n * res(ctx.body(JSON.stringify({ key: 'value' })))\r\n * @see {@link https://mswjs.io/docs/api/context/body `ctx.body()`}\r\n */\nconst body = value => {\n  return res => {\n    res.body = value;\n    return res;\n  };\n};\n\n/**\r\n * Sets a textual response body. Appends a `Content-Type: text/plain`\r\n * header on the mocked response.\r\n * @example res(ctx.text('Successful response'))\r\n * @see {@link https://mswjs.io/docs/api/context/text `ctx.text()`}\r\n */\nconst text = body => {\n  return res => {\n    res.headers.set('Content-Type', 'text/plain');\n    res.body = body;\n    return res;\n  };\n};\n\n/**\r\n * Sets an XML response body. Appends a `Content-Type: text/xml` header\r\n * on the mocked response.\r\n * @example\r\n * res(ctx.xml('<node key=\"value\">Content</node>'))\r\n * @see {@link https://mswjs.io/docs/api/context/xml `ctx.xml()`}\r\n */\nconst xml = body => {\n  return res => {\n    res.headers.set('Content-Type', 'text/xml');\n    res.body = body;\n    return res;\n  };\n};\nexport { body as b, text as t, xml as x };","map":{"version":3,"names":["body","value","res","text","headers","set","xml","b","t","x"],"sources":["/Users/zhaoliang923/Desktop/前端小组/react18-demo/node_modules/msw/lib/esm/xml-deps.js"],"sourcesContent":["/**\r\n * Sets a raw response body. Does not append any `Content-Type` headers.\r\n * @example\r\n * res(ctx.body('Successful response'))\r\n * res(ctx.body(JSON.stringify({ key: 'value' })))\r\n * @see {@link https://mswjs.io/docs/api/context/body `ctx.body()`}\r\n */\r\nconst body = (value) => {\r\n    return (res) => {\r\n        res.body = value;\r\n        return res;\r\n    };\r\n};\n\n/**\r\n * Sets a textual response body. Appends a `Content-Type: text/plain`\r\n * header on the mocked response.\r\n * @example res(ctx.text('Successful response'))\r\n * @see {@link https://mswjs.io/docs/api/context/text `ctx.text()`}\r\n */\r\nconst text = (body) => {\r\n    return (res) => {\r\n        res.headers.set('Content-Type', 'text/plain');\r\n        res.body = body;\r\n        return res;\r\n    };\r\n};\n\n/**\r\n * Sets an XML response body. Appends a `Content-Type: text/xml` header\r\n * on the mocked response.\r\n * @example\r\n * res(ctx.xml('<node key=\"value\">Content</node>'))\r\n * @see {@link https://mswjs.io/docs/api/context/xml `ctx.xml()`}\r\n */\r\nconst xml = (body) => {\r\n    return (res) => {\r\n        res.headers.set('Content-Type', 'text/xml');\r\n        res.body = body;\r\n        return res;\r\n    };\r\n};\n\nexport { body as b, text as t, xml as x };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAIC,KAAK,IAAK;EACpB,OAAQC,GAAG,IAAK;IACZA,GAAG,CAACF,IAAI,GAAGC,KAAK;IAChB,OAAOC,GAAG;EACd,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAIH,IAAI,IAAK;EACnB,OAAQE,GAAG,IAAK;IACZA,GAAG,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,YAAY,CAAC;IAC7CH,GAAG,CAACF,IAAI,GAAGA,IAAI;IACf,OAAOE,GAAG;EACd,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,GAAG,GAAIN,IAAI,IAAK;EAClB,OAAQE,GAAG,IAAK;IACZA,GAAG,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,UAAU,CAAC;IAC3CH,GAAG,CAACF,IAAI,GAAGA,IAAI;IACf,OAAOE,GAAG;EACd,CAAC;AACL,CAAC;AAED,SAASF,IAAI,IAAIO,CAAC,EAAEJ,IAAI,IAAIK,CAAC,EAAEF,GAAG,IAAIG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}